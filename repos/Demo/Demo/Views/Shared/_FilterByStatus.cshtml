@using PagedList
 @model IPagedList<Demo.Models.PatientAppoinmentModel>
 
 

            @(Html
            .Grid(Model)
            .Build(columns =>   
            {
            columns.Add(model => model.UserName).Titled("UserName");
            columns.Add(model => model.DoctorName).Titled("Doctornames").Filterable(true);
            columns.Add(model => model.AppointmentTime).Titled("Time");
            columns.Add(model => model.AppointmentDate).Titled("Date");
            columns.Add(model => model.AppointmentStatus).Titled("Status").RenderedAs((model, row) =>
            {
            var approveId = "approve_" + model.AppointmentID;
            var rejectId = "reject_" + model.AppointmentID;

            var approveUrl = Url.Action("UpdateAppointmentStatus", "Management", new { id = model.AppointmentID, status = "Approve" });
            var rejectUrl = Url.Action("UpdateAppointmentStatus", "Management", new { id = model.AppointmentID, status = "Reject" });
            var statusText = model.AppointmentStatus == "Approve" ? "Approved" : "Rejected";
            var statusClass = model.AppointmentStatus == "Approve" ? "text-success" : "text-danger";
            if(model.AppointmentStatus == "Pending"){
            statusText = "Pending";
            statusClass = "text-warning";
            }
             if(model.AppointmentStatus == "Missed"){
            statusText = "Missed";
            statusClass = "text-danger";
            }
             if(model.AppointmentStatus == "Completed"){
            statusText = "Completed";
            statusClass = "text-success";
            }

            if(!(model.AppointmentStatus == "Completed" || model.AppointmentStatus == "Missed")){

            }
            return Html.Raw($"<span  id='{approveId}' class='tick-mark {(model.AppointmentStatus == "Approve" ? "selected" : "")}' onclick='updateAppointmentStatus(\"{approveId}\", \"{approveUrl}\")'>&#10004;</span>" +
            $"<span id='{rejectId}' class='tick-mark {(model.AppointmentStatus == "Reject" ? "selected" : "")}' onclick='updateAppointmentStatus(\"{rejectId}\", \"{rejectUrl}\")'>&#10008;</span>" +
            $"<span id='status_{model.AppointmentID}' class='{statusClass}'>{statusText}</span>");
            })
            .Encoded(false);

            columns.Add().Titled("Edit").RenderedAs((model, row) =>
            {

            return Html.ActionLink("Edit", "AddEditAppointment", new { area = "Management", appId = model.AppointmentID }, new { @class = "btn btn-primary" });
            });

            columns.Add().Titled("Delete").RenderedAs((model, row) =>
            {
            return Html.ActionLink("Delete", "DeleteAppoinment", new { area = "Management", id = model.AppointmentID, hospitalId = @ViewBag.Did }, new { @class = "btn btn-danger" });
            });

            }).Using(GridFilterMode.Header)
            .Empty("No data found")
            .Filterable()
            .Sortable()
           
            )
        
     <div class="mt-4 pagination">
        <div class="footer mb-auto">
            @{
                if (@Model.Count == 0)
                {
                    <div class="text-center mt-3 mb-4">
                        
                    </div>
                }
                else
                {

                    <div class="d-flex justify-content-center page">
                        @if (Model.PageCount> 1)
                        {
                            <ul class="pagination">

                                @if (Model.HasPreviousPage)
                                {
                                    <li class="page-item" style="cursor: pointer;">
                                        <a class="page-link" aria-label="Previous" id="@Convert.ToInt32(@Model.PageNumber -1)">
                                            <span aria-hidden="true">&laquo;</span>
                                        </a>
                                    </li>
                                }
                                else
                                {
                                    <li class="page-item" style="cursor: not-allowed; pointer-events: none; ">
                                        <a class="page-link disabled" aria-label="Previous">
                                            <span aria-hidden="true">&laquo;</span>
                                        </a>
                                    </li>
                                }
                                @for (int i = 1; i <= Model.PageCount; i++)
                                {
                                    if (i == Model.PageNumber)
                                    {
                                        <li class="page-item active" style="cursor: pointer;"><a style=" background-color: #F88634;border-color: #F88634;" class="page-link" id="@i">@i</a></li>
                                    }
                                    else
                                    {
                                        <li class="page-item" id="page-link-hover" style="cursor: pointer; "><a class="page-link" id="@i">@i</a></li>
                                    }
                                }
                                @if (Model.HasNextPage)
                                {
                                    <li class="page-item" style="cursor: pointer;"> <a class="page-link" aria-label="Next" id="@Convert.ToInt32(@Model.PageNumber +1)"><span aria-hidden="true">&raquo;</span></a></li>
                                }
                                else
                                {
                                    <li class="page-item" style="cursor: not-allowed; pointer-events: none;"> <a class="page-link disabled" aria-label="Next"><span aria-hidden="true">&raquo;</span></a></li>
                                }


                            </ul>

                        }
                    </div>


                }
            }

        </div>

    </div>




        <script src="~/js/mvc-grid/mvc-grid.js"></script>

<script>
        document.querySelectorAll(".mvc-grid").forEach(element => new MvcGrid(element));
</script>
