@using Demo.Models.DummyModels
@using NonFactors.Mvc.Grid
@using System.Web.Mvc
@model Demo.Models.DummyModels.AdminInstances

@{
    ViewData["Title"] = "Doctor Details";
}
<style>
    .tick-mark {
        cursor: pointer;
    }
</style>
@*   20 June - Added Filter Functionality By Mvc Grid Package
*@
<link href="~/css/mvc-grid/mvc-grid.css" rel="stylesheet">


<div class="container mt-3">
    @if (User.IsInRole("ManagementAdmin") || User.IsInRole("SuperAdmin"))
    {
        <partial name="PartialsViews/_HeaderForManagAdmin" />
    }
    @if (TempData["success"] != null)
    {
        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/css/toastr.min.css" />
        <script src="~/lib/jquery/dist/jquery.min.js"></script>
        <script src="//cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
        <script type="text/javascript">
            toastr.success('@TempData["success"]');
        </script>
    }

    @if (User.IsInRole("ManagementAdmin") && Model.Appointments.Any())
    {
        var hospitalName = Model.Appointments.First().HospitalName;
        <h3 style="color:black">Appoinments Details Of @hospitalName</h3>
    }
    else
    {
        <h3>Appoinment Details</h3>
    }
    <div class="mt-2">
        <div class="row">
            <div class="col-md">
                <a asp-area="Management" asp-action="AddEditAppointment" asp-controller="Management" class="btn btn-success">Create Appointment</a>
            </div>

        </div>
    </div>
</div>
<div id="appointmentsContainer" class="mt-3">

    <div class="mt-5">

        @(Html
        .Grid(Model.Appointments)
        .Build(columns =>
        {
        columns.Add(model => model.UserName).Titled("UserName");
        columns.Add(model => model.DoctorName).Titled("Doctornames");
        columns.Add(model => model.AppointmentTime).Titled("Time");
        columns.Add(model => model.AppointmentDate).Titled("Date");
        columns.Add(model => model.AppointmentStatus).Titled("Status").RenderedAs((model, row) =>
        {
        var approveId = "approve_" + model.AppointmentID;
        var rejectId = "reject_" + model.AppointmentID;

        var approveUrl = Url.Action("UpdateAppointmentStatus", "Management", new { id = model.AppointmentID, status = "Approve" });
        var rejectUrl = Url.Action("UpdateAppointmentStatus", "Management", new { id = model.AppointmentID, status = "Reject" });
        var statusText = model.AppointmentStatus == "Approve" ? "Approved" : "Rejected";
        var statusClass = model.AppointmentStatus == "Approve" ? "text-success" : "text-danger";
        if(model.AppointmentStatus == "Pending"){
        statusText = "Pending";
        statusClass = "text-warning";
        }
        if(model.AppointmentStatus == "Missed"){
        statusText = "Missed";
        statusClass = "text-danger";
        }
        if(model.AppointmentStatus == "Completed"){
        statusText = "Completed";
        statusClass = "text-success";
        }

        if(!(model.AppointmentStatus == "Completed" || model.AppointmentStatus == "Missed")){

        }
        return Html.Raw($"<span  id='{approveId}' class='tick-mark {(model.AppointmentStatus == "Approve" ? "selected" : "")}' onclick='updateAppointmentStatus(\"{approveId}\", \"{approveUrl}\")'>&#10004;</span>" +
        $"<span id='{rejectId}' class='tick-mark {(model.AppointmentStatus == "Reject" ? "selected" : "")}' onclick='updateAppointmentStatus(\"{rejectId}\", \"{rejectUrl}\")'>&#10008;</span>" +
        $"<span id='status_{model.AppointmentID}' class='{statusClass}'>{statusText}</span>");
        })
        .Encoded(false);

        columns.Add().Titled("Edit").RenderedAs((model, row) =>
        {

        return Html.ActionLink("Edit", "AddEditAppointment", new { area = "Management", appId = model.AppointmentID }, new { @class = "btn btn-primary" });
        });

        columns.Add().Titled("Delete").RenderedAs((model, row) =>
        {
        return Html.ActionLink("Delete", "DeleteAppoinment", new { area = "Management", id = model.AppointmentID }, new { @class = "btn btn-danger" });
        });

        }).Using(GridFilterMode.Header)
        .Empty("No data found")
        .Pageable(pager =>
        {
        pager.PageSizes = new Dictionary<Int32, String> { { 0, "All" }, { 2, "2" }, { 4, "4" },{ 5, "5" },{ 10, "10" } };
        pager.ShowPageSizes = true;
        pager.PagesToDisplay = 3;
        pager.CurrentPage = 1;
        pager.RowsPerPage = 5;
        })
        .Filterable()
        .Sortable()
        )
    </div>
</div>
<script src="~/js/mvc-grid/mvc-grid.js"></script>

<script>
    document.querySelectorAll(".mvc-grid").forEach(element => new MvcGrid(element));
</script>

<script>
    function updateAppointmentStatus(elementId, url) {
        $.ajax({
            type: "POST",
            url: url,
            success: function (data) {
                if (data.success) {

                    var statusText = data.st === 'Approve' ? 'Approved' : 'Rejected';
                    var statusClass = data.st === 'Approve' ? 'text-success' : 'text-danger';
                    var statusElement = $('#status_' + data.id);
                    statusElement.text(statusText).removeClass('text-success text-danger text-warning').addClass(statusClass);
                } else {
                    alert('Failed to update appointment status.');
                }
            },
            error: function () {
                alert("An error occurred while updating appointment status.");
            }
        });
    }
</script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>


<script src="~/js/filter.js"></script>